substitutions:
  uart_tx_pin: "12" # This is the pin on the microcontroller connecting to the TX pin the RS485 adapter
  uart_rx_pin: "13" # This is the pin on the microcontroller connecting to the RX pin the RS485 adapter
# When setting the tx and rx pins, be sure to set the correct model under the esp32: key further down, 
# and compare the pin numbers printed on the PCB to the documentation from the manufacturer, and input the corresponding GPIO pin numbers here.
# the "DXX" pins on the PCB don't always match the "GPIOXX" pins in ESPHome, so just double check.
# most adapters have status LEDs, an RX and TX, when working properly the TX and RX should flash quickly in sequence.
# if RX only flashes, the tx/rx pins are swapped.
# if TX only flashes, the sensors aren't wired correctly or aren't powered enough
# if either LED stays lit up, the wrong pins are probably defined.

  name: thcscore
  friendly_name: THC-S Core
  on_boot: 
    then:
      - script.execute: bootupscript

preferences:
  flash_write_interval: 90min

esp32:
  board: esp32dev  # Try and define the board you are using as closely as possible to enure proper pin assignments.
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: ""

ota:
  platform: esphome
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Thcs-Core Fallback Hotspot"
    password: !secret wifi_password

captive_portal:

web_server:
  port: 80

# Globals to store some template sensor values in between reboots
globals:
  - id: g_last_high
    type: float
    restore_value: yes
    initial_value: '0'
  - id: g_last_low
    type: float
    restore_value: yes
    initial_value: '0'

### RS485
uart:
  id: modbus_serial
  rx_pin: ${uart_rx_pin}
  tx_pin: ${uart_tx_pin}
  baud_rate: 4800
  stop_bits: 1

modbus:
  id: modbus1
  uart_id: modbus_serial
 
modbus_controller:
  - id: thcs1  # For each THC sensor, we need one 'controller' id for each sensor to refer to later
    update_interval: 10s
    address: 0x1
    command_throttle: 50ms
    setup_priority: -10
    
sensor:
####################################
## H A R D W A R E  S E N S O R S ##
####################################

## THC-S Sensors ##
# Raw moisture from 0-100 from the sensor
  - platform: modbus_controller
    name: "THC-S Moisture"  
    id: WC
    address: 0x0000
    unit_of_measurement: "%"
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      lambda: return (x / 10);
    state_class: measurement
    modbus_controller_id: thcs1  # This is the controller mentioned earlier, for additional THCS or other RS485 sensors this will be  updated

# Temp in C from the THCS  
  - platform: modbus_controller
    name: "THC-S Temp"
    id: C
    address: 0x0001
    unit_of_measurement: "Â°C"
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    filters: 
      lambda: return (x / 10);
    state_class: measurement
    modbus_controller_id: thcs1


# Raw conductivity from the THCS, used for pwEC calculatiions
  - platform: modbus_controller
    name: "THC-S Conductivity"  
    id: EC
    address: 0x0002
    unit_of_measurement: "ms/cm"
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      lambda: return x;
    state_class: measurement
    modbus_controller_id: thcs1

# This is a "TDS" output from the sensor in PPM, not sure what conversion or accuracy.    
  - platform: modbus_controller
    name: "THC-S TDS"  
    disabled_by_default: True  # user has to enable it first
    id: TDS
    address: 0x0004
    unit_of_measurement: "ppm"
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      lambda: return x;
    state_class: measurement
    modbus_controller_id: thcs1


# This template is estimating the VWC based on raw moisture and a 66.7% VWC Coco coir
  - platform: template
    name: "THC-S VWC"  
    internal: False
    id: VWC
    accuracy_decimals: 1
    update_interval: 30s
    lambda: |-
      float soil_hum = id(WC).state;
      float adjusted_vwc = -0.0020844495456097786 * soil_hum * soil_hum + 0.8758395803818368 * soil_hum - 0.007765958483453483;
      return adjusted_vwc;
    state_class: measurement
    unit_of_measurement: "%"
    on_value: 
      then:
        - script.execute: vwc_check


#  This calculation is estimating the pore water EC based on the hilhorst method, calibrated for coco
  - platform: template
    name: "THC-S pwEC"
    id: pw_ec
    state_class: measurement
    unit_of_measurement: "ms/cm"
    accuracy_decimals: 1
    update_interval: 30s
    lambda: |-
      float soil_ec = id(EC).state;
      float soil_temp = id(C).state;
      float soil_hum = id(WC).state;
      soil_ec = 1.93 * soil_ec - 270.8;
      //soil_ec = 0.0000014403 * soil_ec * soil_ec * soil_ec - 0.0036 * soil_ec * soil_ec + 3.7525 * soil_ec - 814.1833;
      /**
      * Bulk EC temperature correction. Test and use if necessary.
      */
      // Soil EC temp correction based on the Teros 12 manual. https://github.com/kromadg/soil-sensor/issues/1
      soil_ec = soil_ec / (1.0 + 0.019 * (soil_temp - 25));
      // the teros bulk_permittivity was calculated from the teros temperature, teros bulk ec and teros pwec by Hilhorst 2000 model
      float soil_apparent_dieletric_constant = 1.3088 + 0.1439 * soil_hum + 0.0076 * soil_hum * soil_hum;

      float soil_bulk_permittivity = soil_apparent_dieletric_constant;  /// Hamed 2015 (apparent_dieletric_constant is the real part of permittivity)
      float soil_pore_permittivity = 80.3 - 0.37 * (soil_temp - 20); /// same as water 80.3 and corrected for temperature

      // converting bulk EC to pore water EC
      float soil_pw_ec;
      if (soil_bulk_permittivity > 4.1)
          soil_pw_ec = ((soil_pore_permittivity * soil_ec) / (soil_bulk_permittivity - 4.1) / 1000); /// from Hilhorst 2000.
      else
          soil_pw_ec = 0;
      return soil_pw_ec;

# The current value of dryback from last known high value til now.
  - platform: template
    id: currentdryback
    name: "Current Dryback"
    icon: "mdi:water-percent"
    lambda: return id(last_high).state - id(VWC).state;
    unit_of_measurement: "%"

# This will get updated everytime VWC updates, if current VWC is > this value.
# It will also get reset between irrigations, so we can track each dryback and irrigation event
  - platform: template
    id: last_high
    name: "Last High VWC"
    icon: "mdi:arrow-up-bold-circle-outline"
    internal: false
    unit_of_measurement: "%"
    on_value: 
      then:
        - lambda: 'id(g_last_high) = x;'
# Similar to last high except gets set at each irrigation event.
  - platform: template
    id: last_low
    name: "Last Low VWC"
    icon: "mdi:arrow-down-bold-circle-outline"
    internal: false
    unit_of_measurement: "%"
    on_value: 
      then:
        - lambda: 'id(g_last_low) = x;'

## Wi-fi sensors for signal strengh, and uptime
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 30s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""
    
  - platform: uptime
    name: Uptime
    update_interval: 60s
    entity_category: diagnostic

############################
## T E X T  S E N S O R S ##
############################
text_sensor:
# Send IP Address to HA.
  - platform: wifi_info
    ip_address:
      name: IP Address
      entity_category: diagnostic

# Here we are getting the time from home assistant.
time:
  - platform: homeassistant
    id: ha_time

script:
# Set some stuff at boot up so other stuff doesnt break
- id: bootupscript
  mode: single
  then:
    - lambda: |-
        // set last low, last high
        id(last_low).publish_state(id(g_last_low)); 
        id(last_high).publish_state(id(g_last_high)); 
- id: vwc_check 
  mode: single
  then:
    - logger.log: "Checking Last VWC vs low and last high..."
    - if:
        condition: #Check if current VWC is higher than last_high and if so, update last_high
          lambda: 'return id(VWC).state > id(last_high).state;'
        then:  
          - sensor.template.publish:
              id: last_high
              state: !lambda 'return id(VWC).state;'
          - logger.log: "VWC > last_high, setting new last_high"

    - if:
        condition: #Check if current VWC is lower than last low
          lambda: 'return id(VWC).state < id(last_low).state;'
        then:  
          - sensor.template.publish:
              id: last_low
              state: !lambda 'return id(VWC).state;'
          - logger.log: "VWC < last_low, setting new last_low"
